<ui:composition xmlns:h="http://java.sun.com/jsf/html"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:fn="http://java.sun.com/jsp/jstl/functions"
        xmlns:g="http://code.google.com/p/ada-ado/generator"
                xmlns:u="http://code.google.com/p/ada-asf/util"
        xmlns:f="http://java.sun.com/jsf/core">
<h:list value="#{list.members}" var="column">
  <h:panelGroup rendered="#{not column.isVersion and column.isPrimitiveType and column.isUpdated and column.name ne list.id.name }">
    <u:set var="counter" value="#{counter + 1}"/>
      #{counter ge 2 ? 'els' : ''}if Name = "#{column.name}" then
    <h:panelGroup rendered="#{is_attribute}">
      <h:panelGroup rendered="#{column.type.isIdentifier}">
         Item.#{fn:capitalize(column.name)} := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.isNull and not column.type.isIdentifier}">
         Item.#{fn:capitalize(column.name)}.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.#{fn:capitalize(column.name)}.Is_Null then
            <h:panelGroup rendered="#{column.type.isNewDiscrete}">
            Item.#{fn:capitalize(column.name)}.Value := #{g:adaType(column,1)} (Util.Beans.Objects.To_Integer (Value));
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isInteger and not column.type.isNewDiscrete}">
            Item.#{fn:capitalize(column.name)}.Value := Util.Beans.Objects.To_Integer (Value);
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isFloat}">
            Item.#{fn:capitalize(column.name)}.Value := Util.Beans.Objects.To_Float (Value);
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isDate}">
            Item.#{fn:capitalize(column.name)}.Value := Util.Beans.Objects.Time.To_Time (Value);
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isBoolean}">
            Item.#{fn:capitalize(column.name)}.Value := Util.Beans.Objects.To_Boolean (Value);
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isString}">
            Item.#{fn:capitalize(column.name)}.Value := Util.Beans.Objects.To_Unbounded_String (Value);
            </h:panelGroup>
            <h:panelGroup rendered="#{column.type.isEnum}">
            Item.#{fn:capitalize(column.name)}.Value := #{column.type.name}_Objects.To_Value (Value);
            </h:panelGroup>
         end if;
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isInteger and not column.isNull and not column.type.isNewDiscrete and g:adaType(column,1) ne 'ADO.Int64'}">
         Item.#{fn:capitalize(column.name)} := Util.Beans.Objects.To_Integer (Value);
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isInteger and not column.isNull and g:adaType(column,1) eq 'ADO.Int64'}">
         Item.#{fn:capitalize(column.name)} := #{g:adaType(column,1)} (Util.Beans.Objects.To_Long_Long_Integer (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isNewDiscrete and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := #{g:adaType(column,1)} (Util.Beans.Objects.To_Integer (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isFloat and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := Util.Beans.Objects.To_Float (Value);
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isDate and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := Util.Beans.Objects.Time.To_Time (Value);
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isEnum and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := #{g:adaType(column,0)}_Objects.To_Value (Value);
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isBoolean and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := Util.Beans.Objects.To_Boolean (Value);
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isString and not column.isNull}">
         Item.#{fn:capitalize(column.name)} := Util.Beans.Objects.To_Unbounded_String (Value);
      </h:panelGroup>
    </h:panelGroup>
    <h:panelGroup rendered="#{not is_attribute}">
      <h:panelGroup rendered="#{column.type.isIdentifier}">
         Item.Set_#{fn:capitalize(column.name)} (ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value)));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isInteger and column.type.name ne 'ADO.Entity_Type'}">
         Item.Set_#{fn:capitalize(column.name)} (Util.Beans.Objects.To_Integer (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isDate and not column.isNull}">
         Item.Set_#{fn:capitalize(column.name)} (Util.Beans.Objects.Time.To_Time (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.name eq 'ADO.Entity_Type'}">
         Item.Set_#{fn:capitalize(column.name)} (ADO.Entity_Type (Util.Beans.Objects.To_Integer (Value)));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isDate and column.isNull}">
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_#{fn:capitalize(column.name)} (ADO.Nullable_Time '(Is_Null => True, others => &lt;&gt;));
         else
            Item.Set_#{fn:capitalize(column.name)} (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isBoolean}">
         Item.Set_#{fn:capitalize(column.name)} (Util.Beans.Objects.To_Boolean (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{column.type.isEnum}">
         Item.Set_#{fn:capitalize(column.name)} (#{fn:capitalize(column.type.name)}_Objects.To_Value (Value));
      </h:panelGroup>
      <h:panelGroup rendered="#{not column.type.isInteger and not column.type.isEnum and not column.type.isIdentifier and not column.type.isDate and not column.type.isBoolean}">
         Item.Set_#{fn:capitalize(column.name)} (Util.Beans.Objects.To_String (Value));
      </h:panelGroup>
    </h:panelGroup>
</h:panelGroup></h:list>
</ui:composition>
